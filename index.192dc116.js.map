{"mappings":"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","sources":["<anon>","src/simple-adaptive-slider.js"],"sourcesContent":["class ItcSimpleSlider {\n    // базовые классы и селекторы\n    static PREFIX = \"itcss\";\n    static EL_WRAPPER = `${ItcSimpleSlider.PREFIX}__wrapper`;\n    static EL_ITEM = `${ItcSimpleSlider.PREFIX}__item`;\n    static EL_ITEM_ACTIVE = `${ItcSimpleSlider.PREFIX}__item_active`;\n    static EL_ITEMS = `${ItcSimpleSlider.PREFIX}__items`;\n    static EL_INDICATOR = `${ItcSimpleSlider.PREFIX}__indicator`;\n    static EL_INDICATOR_ACTIVE = `${ItcSimpleSlider.PREFIX}__indicator_active`;\n    static EL_INDICATORS = `${ItcSimpleSlider.PREFIX}__indicators`;\n    static EL_CONTROL = `${ItcSimpleSlider.PREFIX}__btn`;\n    // порог для переключения слайда (20%)\n    static SWIPE_THRESHOLD = 20;\n    // класс для отключения transition\n    static TRANSITION_NONE = \"transition-none\";\n    // Определите, поддерживает ли текущий клиент пассивные события\n    static checkSupportPassiveEvents() {\n        let passiveSupported = false;\n        try {\n            const options = Object.defineProperty({}, \"passive\", {\n                get () {\n                    passiveSupported = true;\n                }\n            });\n            window.addEventListener(\"testPassiveListener\", null, options);\n            window.removeEventListener(\"testPassiveListener\", null, options);\n        } catch (error) {\n            passiveSupported = false;\n        }\n        return passiveSupported;\n    }\n    constructor(target, config){\n        this._el = typeof target === \"string\" ? document.querySelector(target) : target;\n        this._elWrapper = this._el.querySelector(`.${this.constructor.EL_WRAPPER}`);\n        this._elItems = this._el.querySelector(`.${this.constructor.EL_ITEMS}`);\n        this._elListItem = this._el.querySelectorAll(`.${this.constructor.EL_ITEM}`);\n        // экстремальные значения слайдов\n        this._exOrderMin = 0;\n        this._exOrderMax = 0;\n        this._exItemMin = null;\n        this._exItemMax = null;\n        this._exTranslateMin = 0;\n        this._exTranslateMax = 0;\n        this._states = [];\n        this._isBalancing = false;\n        // направление смены слайдов (по умолчанию)\n        this._direction = \"next\";\n        // текущее значение трансформации\n        this._transform = 0;\n        this._clientRect = this._elWrapper.getBoundingClientRect();\n        this._supportResizeObserver = typeof window.ResizeObserver !== \"undefined\";\n        const styleElItems = window.getComputedStyle(this._elItems);\n        this._delay = Math.round(parseFloat(styleElItems.transitionDuration) * 50);\n        // swipe параметры\n        this._hasSwipeState = false;\n        this._swipeStartPosX = 0;\n        // id таймера\n        this._intervalId = null;\n        this._config = {\n            loop: true,\n            autoplay: false,\n            interval: 5000,\n            indicators: true,\n            swipe: true,\n            ...config\n        };\n        this._elItems.dataset.translate = \"0\";\n        // добавляем к слайдам data-атрибуты\n        this._elListItem.forEach((item, index)=>{\n            item.dataset.order = `${index}`;\n            item.dataset.index = `${index}`;\n            item.dataset.translate = \"0\";\n            this._states.push(index === 0 ? 1 : 0);\n        });\n        // перемещаем последний слайд перед первым\n        if (this._config.loop) {\n            const count = this._elListItem.length - 1;\n            const translate = -this._elListItem.length;\n            this._elListItem[count].dataset.order = \"-1\";\n            this._elListItem[count].dataset.translate = `${-this._elListItem.length}`;\n            const valueX = translate * this._clientRect.width;\n            this._elListItem[count].style.transform = `translate3D(${valueX}px, 0px, 0.1px)`;\n        }\n        // добавляем индикаторы к слайдеру\n        this._addIndicators();\n        this._elListIndicator = document.querySelectorAll(`.${this.constructor.EL_INDICATOR}`);\n        // обновляем экстремальные значения переменных\n        this._updateExProperties();\n        // помечаем активные элементы\n        this._changeActiveItems();\n        // назначаем обработчики\n        this._addEventListener();\n        // запускаем автоматическую смену слайдов\n        this._autoplay();\n    }\n    _changeActiveItems() {\n        this._states.forEach((item, index)=>{\n            if (item) this._elListItem[index].classList.add(this.constructor.EL_ITEM_ACTIVE);\n            else this._elListItem[index].classList.remove(this.constructor.EL_ITEM_ACTIVE);\n            if (this._elListIndicator.length && item) this._elListIndicator[index].classList.add(this.constructor.EL_INDICATOR_ACTIVE);\n            else if (this._elListIndicator.length && !item) this._elListIndicator[index].classList.remove(this.constructor.EL_INDICATOR_ACTIVE);\n        });\n        this._el.dispatchEvent(new CustomEvent(\"change.itc.slider\", {\n            bubbles: true\n        }));\n    }\n    // смена слайдов\n    _move() {\n        this._elItems.classList.remove(this.constructor.TRANSITION_NONE);\n        if (this._direction === \"none\") {\n            const valueX = this._transform * this._clientRect.width;\n            this._elItems.style.transform = `translate3D(${valueX}px, 0px, 0.1px)`;\n            return;\n        }\n        if (!this._config.loop) {\n            const isNotMovePrev = this._states[0] && this._direction === \"prev\";\n            const isNotMoveNext = this._states[this._states.length - 1] && this._direction === \"next\";\n            if (isNotMovePrev || isNotMoveNext) {\n                this._autoplay(\"stop\");\n                return;\n            }\n        }\n        this._transform += this._direction === \"next\" ? -1 : 1;\n        if (this._direction === \"next\") this._states = [\n            ...this._states.slice(-1),\n            ...this._states.slice(0, -1)\n        ];\n        else if (this._direction === \"prev\") this._states = [\n            ...this._states.slice(1),\n            ...this._states.slice(0, 1)\n        ];\n        this._elItems.dataset.translate = this._transform;\n        const valueX = this._transform * this._clientRect.width;\n        this._elItems.style.transform = `translate3D(${valueX}px, 0px, 0.1px)`;\n        this._elItems.dispatchEvent(new CustomEvent(\"moving.itc.slider\", {\n            bubbles: true\n        }));\n        this._changeActiveItems();\n        if (!this._isBalancing) {\n            this._isBalancing = true;\n            window.requestAnimationFrame(this._balanceItems.bind(this));\n        }\n    }\n    // функция для перемещения к слайду по индексу\n    _moveTo(index) {\n        const currIndex = this._states.indexOf(1);\n        this._direction = index > currIndex ? \"next\" : \"prev\";\n        for(let i = 0; i < Math.abs(index - currIndex); i++)this._move();\n    }\n    // метод для автоматической смены слайдов\n    _autoplay(action) {\n        if (!this._config.autoplay) return;\n        if (action === \"stop\") {\n            clearInterval(this._intervalId);\n            this._intervalId = null;\n            return;\n        }\n        if (this._intervalId === null) this._intervalId = setInterval(()=>{\n            this._direction = \"next\";\n            this._move();\n        }, this._config.interval);\n    }\n    // добавление индикаторов\n    _addIndicators() {\n        const el = this._el.querySelector(`.${this.constructor.EL_INDICATORS}`);\n        if (el || !this._config.indicators) return;\n        let rows = \"\";\n        for(let i = 0, { length } = this._elListItem; i < length; i++)rows += `<li class=\"${this.constructor.EL_INDICATOR}\" data-slide-to=\"${i}\"></li>`;\n        const html = `<ol class=\"${this.constructor.EL_INDICATORS}\">${rows}</ol>`;\n        this._el.insertAdjacentHTML(\"beforeend\", html);\n    }\n    // refresh extreme values\n    _updateExProperties() {\n        const els = Object.values(this._elListItem).map((el)=>el);\n        const orders = els.map((item)=>Number(item.dataset.order));\n        this._exOrderMin = Math.min(...orders);\n        this._exOrderMax = Math.max(...orders);\n        const min = orders.indexOf(this._exOrderMin);\n        const max = orders.indexOf(this._exOrderMax);\n        this._exItemMin = els[min];\n        this._exItemMax = els[max];\n        this._exTranslateMin = Number(this._exItemMin.dataset.translate);\n        this._exTranslateMax = Number(this._exItemMax.dataset.translate);\n    }\n    _balanceItems() {\n        if (!this._isBalancing) return;\n        if (this._direction === \"next\") {\n            const exItemRight = this._exItemMin.getBoundingClientRect().right;\n            if (exItemRight < this._clientRect.left - this._clientRect.width / 2) {\n                this._exItemMin.dataset.order = `${this._exOrderMin + this._elListItem.length}`;\n                this._exItemMin.dataset.translate = `${this._exTranslateMin + this._elListItem.length}`;\n                const valueX = (this._exTranslateMin + this._elListItem.length) * this._clientRect.width;\n                this._exItemMin.style.transform = `translate3D(${valueX}px, 0px, 0.1px)`;\n                this._updateExProperties();\n            }\n        } else {\n            const exItemLeft = this._exItemMax.getBoundingClientRect().left;\n            if (exItemLeft > this._clientRect.right + this._clientRect.width / 2) {\n                this._exItemMax.dataset.order = `${this._exOrderMax - this._elListItem.length}`;\n                this._exItemMax.dataset.translate = `${this._exTranslateMax - this._elListItem.length}`;\n                const valueX = (this._exTranslateMax - this._elListItem.length) * this._clientRect.width;\n                this._exItemMax.style.transform = `translate3D(${valueX}px, 0px, 0.1px)`;\n                this._updateExProperties();\n            }\n        }\n        window.setTimeout(()=>{\n            window.requestAnimationFrame(this._balanceItems.bind(this));\n        }, this._delay);\n    }\n    // adding listeners\n    _addEventListener() {\n        const onSwipeStart = (e)=>{\n            this._autoplay(\"stop\");\n            if (e.target.closest(`.${this.constructor.EL_CONTROL}`)) return;\n            const event = e.type.search(\"touch\") === 0 ? e.touches[0] : e;\n            this._swipeStartPosX = event.clientX;\n            this._swipeStartPosY = event.clientY;\n            this._hasSwipeState = true;\n            this._hasSwiping = false;\n        };\n        const onSwipeMove = (e)=>{\n            if (!this._hasSwipeState) return;\n            const event = e.type.search(\"touch\") === 0 ? e.touches[0] : e;\n            let diffPosX = this._swipeStartPosX - event.clientX;\n            const diffPosY = this._swipeStartPosY - event.clientY;\n            if (!this._hasSwiping) {\n                if (Math.abs(diffPosY) > Math.abs(diffPosX) || Math.abs(diffPosX) === 0) {\n                    this._hasSwipeState = false;\n                    return;\n                }\n                this._hasSwiping = true;\n            }\n            e.preventDefault();\n            if (!this._config.loop) {\n                const isNotMoveFirst = this._states[0] && diffPosX <= 0;\n                const isNotMoveLast = this._states[this._states.length - 1] && diffPosX >= 0;\n                if (isNotMoveFirst || isNotMoveLast) diffPosX /= 4;\n            }\n            this._elItems.classList.add(this.constructor.TRANSITION_NONE);\n            const valueX = this._transform * this._clientRect.width - diffPosX;\n            this._elItems.style.transform = `translate3D(${valueX}px, 0px, 0.1px)`;\n        };\n        const onSwipeEnd = (e)=>{\n            if (!this._hasSwipeState) return;\n            const event = e.type.search(\"touch\") === 0 ? e.changedTouches[0] : e;\n            let diffPosX = this._swipeStartPosX - event.clientX;\n            if (diffPosX === 0) {\n                this._hasSwipeState = false;\n                return;\n            }\n            if (!this._config.loop) {\n                const isNotMoveFirst = this._states[0] && diffPosX <= 0;\n                const isNotMoveLast = this._states[this._states.length - 1] && diffPosX >= 0;\n                if (isNotMoveFirst || isNotMoveLast) diffPosX = 0;\n            }\n            const value = diffPosX / this._clientRect.width * 100;\n            this._elItems.classList.remove(this.constructor.TRANSITION_NONE);\n            if (value > this.constructor.SWIPE_THRESHOLD) {\n                this._direction = \"next\";\n                this._move();\n            } else if (value < -this.constructor.SWIPE_THRESHOLD) {\n                this._direction = \"prev\";\n                this._move();\n            } else {\n                this._direction = \"none\";\n                this._move();\n            }\n            this._hasSwipeState = false;\n            this._autoplay();\n        };\n        // click\n        this._el.addEventListener(\"click\", (e)=>{\n            const $target = e.target;\n            this._autoplay(\"stop\");\n            if ($target.classList.contains(this.constructor.EL_CONTROL)) {\n                e.preventDefault();\n                this._direction = $target.dataset.slide;\n                this._move();\n            } else if ($target.dataset.slideTo) {\n                e.preventDefault();\n                const index = parseInt($target.dataset.slideTo, 10);\n                this._moveTo(index);\n            }\n            this._autoplay();\n        });\n        // transitionstart and transitionend\n        if (this._config.loop) this._elItems.addEventListener(\"transitionend\", ()=>{\n            this._isBalancing = false;\n        });\n        // mouseenter and mouseleave\n        this._el.addEventListener(\"mouseenter\", ()=>{\n            this._autoplay(\"stop\");\n        });\n        this._el.addEventListener(\"mouseleave\", ()=>{\n            this._autoplay();\n        });\n        // swipe\n        if (this._config.swipe) {\n            const options = this.constructor.checkSupportPassiveEvents() ? {\n                passive: false\n            } : false;\n            this._el.addEventListener(\"touchstart\", onSwipeStart, options);\n            this._el.addEventListener(\"touchmove\", onSwipeMove, options);\n            this._el.addEventListener(\"mousedown\", onSwipeStart);\n            this._el.addEventListener(\"mousemove\", onSwipeMove);\n            document.addEventListener(\"touchend\", onSwipeEnd);\n            document.addEventListener(\"mouseup\", onSwipeEnd);\n            document.addEventListener(\"mouseout\", onSwipeEnd);\n        }\n        this._el.addEventListener(\"dragstart\", (e)=>{\n            e.preventDefault();\n        });\n        // при изменении активности вкладки\n        document.addEventListener(\"visibilitychange\", ()=>{\n            if (document.visibilityState === \"visible\" && this._config.loop) this._autoplay();\n            else this._autoplay(\"stop\");\n        });\n        if (this._supportResizeObserver) {\n            const resizeObserver = new ResizeObserver((entries)=>{\n                const { contentRect } = entries[0];\n                if (Math.round(this._clientRect.width * 10) === Math.round(contentRect.width * 10)) return;\n                this._clientRect = contentRect;\n                const newValueX = contentRect.width * Number(this._elItems.dataset.translate);\n                this.reset(newValueX, true);\n                this._autoplay();\n            });\n            resizeObserver.observe(this._elWrapper);\n        }\n    }\n    reset(newValueX = 0, recalc = false) {\n        this._autoplay(\"stop\");\n        this._elItems.classList.add(this.constructor.TRANSITION_NONE);\n        this._elItems.style.transform = `translate3D(${newValueX}px, 0px, 0.1px)`;\n        this._elListItem.forEach((el)=>{\n            const valueX = recalc ? Number(el.dataset.translate) * this._clientRect.width : 0;\n            el.style.transform = `translate3D(${valueX}px, 0px, 0.1px)`;\n        });\n        if (!recalc) {\n            this._transform = 0;\n            this._states = [];\n            this._elItems.dataset.translate = \"0\";\n            this._elListItem = this._el.querySelectorAll(`.${this.constructor.EL_ITEM}`);\n            // добавляем к слайдам data-атрибуты\n            this._elListItem.forEach((item, index)=>{\n                item.dataset.order = `${index}`;\n                item.dataset.index = `${index}`;\n                item.dataset.translate = \"0\";\n                this._states.push(index === 0 ? 1 : 0);\n            });\n            // перемещаем последний слайд перед первым\n            if (this._config.loop) {\n                const count = this._elListItem.length - 1;\n                const translate = -this._elListItem.length;\n                this._elListItem[count].dataset.order = \"-1\";\n                this._elListItem[count].dataset.translate = `${-this._elListItem.length}`;\n                const valueX = translate * this._clientRect.width;\n                this._elListItem[count].style.transform = `translate3D(${valueX}px, 0px, 0.1px)`;\n            }\n            this._el.querySelector(`.${this.constructor.EL_INDICATORS}`).remove();\n            // добавляем индикаторы к слайдеру\n            this._addIndicators();\n            this._elListIndicator = document.querySelectorAll(`.${this.constructor.EL_INDICATOR}`);\n            // обновляем экстремальные значения переменных\n            this._updateExProperties();\n            // помечаем активные элементы\n            this._changeActiveItems();\n        }\n        this._autoplay();\n    }\n    // перейти к следующему слайду\n    next() {\n        this._direction = \"next\";\n        this._move();\n    }\n    // перейти к предыдущему слайду\n    prev() {\n        this._direction = \"prev\";\n        this._move();\n    }\n    // управление автоматической сменой слайдов\n    autoplay() {\n        this._autoplay(\"stop\");\n    }\n    moveTo(index) {\n        this._moveTo(index);\n    }\n}\n\n//# sourceMappingURL=index.192dc116.js.map\n","class ItcSimpleSlider {\n  // базовые классы и селекторы\n  static PREFIX = 'itcss';\n  static EL_WRAPPER = `${ItcSimpleSlider.PREFIX}__wrapper`;\n  static EL_ITEM = `${ItcSimpleSlider.PREFIX}__item`;\n  static EL_ITEM_ACTIVE = `${ItcSimpleSlider.PREFIX}__item_active`;\n  static EL_ITEMS = `${ItcSimpleSlider.PREFIX}__items`;\n  static EL_INDICATOR = `${ItcSimpleSlider.PREFIX}__indicator`;\n  static EL_INDICATOR_ACTIVE = `${ItcSimpleSlider.PREFIX}__indicator_active`;\n  static EL_INDICATORS = `${ItcSimpleSlider.PREFIX}__indicators`;\n  static EL_CONTROL = `${ItcSimpleSlider.PREFIX}__btn`;\n  // порог для переключения слайда (20%)\n  static SWIPE_THRESHOLD = 20;\n  // класс для отключения transition\n  static TRANSITION_NONE = 'transition-none';\n  // Определите, поддерживает ли текущий клиент пассивные события\n  static checkSupportPassiveEvents() {\n    let passiveSupported = false;\n    try {\n      const options = Object.defineProperty({}, 'passive', {\n        get() {\n          passiveSupported = true;\n        },\n      });\n      window.addEventListener('testPassiveListener', null, options);\n      window.removeEventListener('testPassiveListener', null, options);\n    } catch (error) {\n      passiveSupported = false;\n    }\n    return passiveSupported;\n  }\n\n  constructor(target, config) {\n    this._el = typeof target === 'string' ? document.querySelector(target) : target;\n    this._elWrapper = this._el.querySelector(`.${this.constructor.EL_WRAPPER}`);\n    this._elItems = this._el.querySelector(`.${this.constructor.EL_ITEMS}`);\n    this._elListItem = this._el.querySelectorAll(`.${this.constructor.EL_ITEM}`);\n\n    // экстремальные значения слайдов\n    this._exOrderMin = 0;\n    this._exOrderMax = 0;\n    this._exItemMin = null;\n    this._exItemMax = null;\n    this._exTranslateMin = 0;\n    this._exTranslateMax = 0;\n\n    this._states = [];\n\n    this._isBalancing = false;\n\n    // направление смены слайдов (по умолчанию)\n    this._direction = 'next';\n    // текущее значение трансформации\n    this._transform = 0;\n\n    this._clientRect = this._elWrapper.getBoundingClientRect();\n\n    this._supportResizeObserver = typeof window.ResizeObserver !== 'undefined';\n\n    const styleElItems = window.getComputedStyle(this._elItems);\n    this._delay = Math.round(parseFloat(styleElItems.transitionDuration) * 50);\n\n    // swipe параметры\n    this._hasSwipeState = false;\n    this._swipeStartPosX = 0;\n    // id таймера\n    this._intervalId = null;\n    this._config = {\n      loop: true,\n      autoplay: false,\n      interval: 5000,\n      indicators: true,\n      swipe: true,\n      ...config\n    };\n    this._elItems.dataset.translate = '0';\n    // добавляем к слайдам data-атрибуты\n    this._elListItem.forEach((item, index) => {\n      item.dataset.order = `${index}`;\n      item.dataset.index = `${index}`;\n      item.dataset.translate = '0';\n      this._states.push(index === 0 ? 1 : 0);\n    });\n\n    // перемещаем последний слайд перед первым\n    if (this._config.loop) {\n      const count = this._elListItem.length - 1;\n      const translate = -this._elListItem.length;\n      this._elListItem[count].dataset.order = '-1';\n      this._elListItem[count].dataset.translate = `${-this._elListItem.length}`;\n      const valueX = translate * this._clientRect.width;\n      this._elListItem[count].style.transform = `translate3D(${valueX}px, 0px, 0.1px)`;\n    }\n    // добавляем индикаторы к слайдеру\n    this._addIndicators();\n    this._elListIndicator = document.querySelectorAll(`.${this.constructor.EL_INDICATOR}`);\n    // обновляем экстремальные значения переменных\n    this._updateExProperties();\n    // помечаем активные элементы\n    this._changeActiveItems();\n    // назначаем обработчики\n    this._addEventListener();\n    // запускаем автоматическую смену слайдов\n    this._autoplay();\n  }\n\n  _changeActiveItems() {\n    this._states.forEach((item, index) => {\n      if (item) {\n        this._elListItem[index].classList.add(this.constructor.EL_ITEM_ACTIVE);\n      } else {\n        this._elListItem[index].classList.remove(this.constructor.EL_ITEM_ACTIVE);\n      }\n      if (this._elListIndicator.length && item) {\n        this._elListIndicator[index].classList.add(this.constructor.EL_INDICATOR_ACTIVE);\n      } else if (this._elListIndicator.length && !item) {\n        this._elListIndicator[index].classList.remove(this.constructor.EL_INDICATOR_ACTIVE);\n      }\n    });\n    this._el.dispatchEvent(new CustomEvent('change.itc.slider', { bubbles: true }));\n  }\n\n  // смена слайдов\n  _move() {\n    this._elItems.classList.remove(this.constructor.TRANSITION_NONE);\n    if (this._direction === 'none') {\n      const valueX = this._transform * this._clientRect.width;\n      this._elItems.style.transform = `translate3D(${valueX}px, 0px, 0.1px)`;\n      return;\n    }\n    if (!this._config.loop) {\n      const isNotMovePrev = this._states[0] && this._direction === 'prev';\n      const isNotMoveNext = this._states[this._states.length - 1] && this._direction === 'next';\n      if (isNotMovePrev || isNotMoveNext) {\n        this._autoplay('stop');\n        return;\n      }\n    }\n    this._transform += this._direction === 'next' ? -1 : 1;\n    if (this._direction === 'next') {\n      this._states = [...this._states.slice(-1), ...this._states.slice(0, -1)];\n    } else if (this._direction === 'prev') {\n      this._states = [...this._states.slice(1), ...this._states.slice(0, 1)];\n    }\n    this._elItems.dataset.translate = this._transform;\n    const valueX = this._transform * this._clientRect.width;\n    this._elItems.style.transform = `translate3D(${valueX}px, 0px, 0.1px)`;\n    this._elItems.dispatchEvent(new CustomEvent('moving.itc.slider', { bubbles: true }));\n    this._changeActiveItems();\n    if (!this._isBalancing) {\n      this._isBalancing = true;\n      window.requestAnimationFrame(this._balanceItems.bind(this));\n    }\n  }\n\n  // функция для перемещения к слайду по индексу\n  _moveTo(index) {\n    const currIndex = this._states.indexOf(1);\n    this._direction = index > currIndex ? 'next' : 'prev';\n    for (let i = 0; i < Math.abs(index - currIndex); i++) {\n      this._move();\n    }\n  }\n\n  // метод для автоматической смены слайдов\n  _autoplay(action) {\n    if (!this._config.autoplay) {\n      return;\n    }\n    if (action === 'stop') {\n      clearInterval(this._intervalId);\n      this._intervalId = null;\n      return;\n    }\n    if (this._intervalId === null) {\n      this._intervalId = setInterval(() => {\n        this._direction = 'next';\n        this._move();\n      }, this._config.interval);\n    }\n  }\n\n  // добавление индикаторов\n  _addIndicators() {\n    const el = this._el.querySelector(`.${this.constructor.EL_INDICATORS}`);\n    if (el || !this._config.indicators) {\n      return;\n    }\n    let rows = '';\n    for (let i = 0, { length } = this._elListItem; i < length; i++) {\n      rows += `<li class=\"${this.constructor.EL_INDICATOR}\" data-slide-to=\"${i}\"></li>`;\n    }\n    const html = `<ol class=\"${this.constructor.EL_INDICATORS}\">${rows}</ol>`;\n    this._el.insertAdjacentHTML('beforeend', html);\n  }\n\n  // refresh extreme values\n  _updateExProperties() {\n    const els = Object.values(this._elListItem).map((el) => el);\n    const orders = els.map((item) => Number(item.dataset.order));\n    this._exOrderMin = Math.min(...orders);\n    this._exOrderMax = Math.max(...orders);\n    const min = orders.indexOf(this._exOrderMin);\n    const max = orders.indexOf(this._exOrderMax);\n    this._exItemMin = els[min];\n    this._exItemMax = els[max];\n    this._exTranslateMin = Number(this._exItemMin.dataset.translate);\n    this._exTranslateMax = Number(this._exItemMax.dataset.translate);\n  }\n\n  _balanceItems() {\n    if (!this._isBalancing) {\n      return;\n    }\n    if (this._direction === 'next') {\n      const exItemRight = this._exItemMin.getBoundingClientRect().right;\n      if (exItemRight < this._clientRect.left - this._clientRect.width / 2) {\n        this._exItemMin.dataset.order = `${this._exOrderMin + this._elListItem.length}`;\n        this._exItemMin.dataset.translate = `${this._exTranslateMin + this._elListItem.length}`;\n        const valueX = (this._exTranslateMin + this._elListItem.length) * this._clientRect.width;\n        this._exItemMin.style.transform = `translate3D(${valueX}px, 0px, 0.1px)`;\n        this._updateExProperties();\n      }\n    } else {\n      const exItemLeft = this._exItemMax.getBoundingClientRect().left;\n      if (exItemLeft > this._clientRect.right + this._clientRect.width / 2) {\n        this._exItemMax.dataset.order = `${this._exOrderMax - this._elListItem.length}`;\n        this._exItemMax.dataset.translate = `${this._exTranslateMax - this._elListItem.length}`;\n        const valueX = (this._exTranslateMax - this._elListItem.length) * this._clientRect.width;\n        this._exItemMax.style.transform = `translate3D(${valueX}px, 0px, 0.1px)`;\n        this._updateExProperties();\n      }\n    }\n    window.setTimeout(() => {\n      window.requestAnimationFrame(this._balanceItems.bind(this));\n    }, this._delay);\n  }\n\n  // adding listeners\n  _addEventListener() {\n    const onSwipeStart = (e) => {\n      this._autoplay('stop');\n      if (e.target.closest(`.${this.constructor.EL_CONTROL}`)) {\n        return;\n      }\n      const event = e.type.search('touch') === 0 ? e.touches[0] : e;\n      this._swipeStartPosX = event.clientX;\n      this._swipeStartPosY = event.clientY;\n      this._hasSwipeState = true;\n      this._hasSwiping = false;\n    };\n    const onSwipeMove = (e) => {\n      if (!this._hasSwipeState) {\n        return;\n      }\n      const event = e.type.search('touch') === 0 ? e.touches[0] : e;\n      let diffPosX = this._swipeStartPosX - event.clientX;\n      const diffPosY = this._swipeStartPosY - event.clientY;\n      if (!this._hasSwiping) {\n        if (Math.abs(diffPosY) > Math.abs(diffPosX) || Math.abs(diffPosX) === 0) {\n          this._hasSwipeState = false;\n          return;\n        }\n        this._hasSwiping = true;\n      }\n      e.preventDefault();\n      if (!this._config.loop) {\n        const isNotMoveFirst = this._states[0] && diffPosX <= 0;\n        const isNotMoveLast = this._states[this._states.length - 1] && diffPosX >= 0;\n        if (isNotMoveFirst || isNotMoveLast) {\n          diffPosX /= 4;\n        }\n      }\n      this._elItems.classList.add(this.constructor.TRANSITION_NONE);\n      const valueX = this._transform * this._clientRect.width - diffPosX;\n      this._elItems.style.transform = `translate3D(${valueX}px, 0px, 0.1px)`;\n    };\n    const onSwipeEnd = (e) => {\n      if (!this._hasSwipeState) {\n        return;\n      }\n      const event = e.type.search('touch') === 0 ? e.changedTouches[0] : e;\n      let diffPosX = this._swipeStartPosX - event.clientX;\n      if (diffPosX === 0) {\n        this._hasSwipeState = false;\n        return;\n      }\n      if (!this._config.loop) {\n        const isNotMoveFirst = this._states[0] && diffPosX <= 0;\n        const isNotMoveLast = this._states[this._states.length - 1] && diffPosX >= 0;\n        if (isNotMoveFirst || isNotMoveLast) {\n          diffPosX = 0;\n        }\n      }\n      const value = (diffPosX / this._clientRect.width) * 100;\n      this._elItems.classList.remove(this.constructor.TRANSITION_NONE);\n      if (value > this.constructor.SWIPE_THRESHOLD) {\n        this._direction = 'next';\n        this._move();\n      } else if (value < -this.constructor.SWIPE_THRESHOLD) {\n        this._direction = 'prev';\n        this._move();\n      } else {\n        this._direction = 'none';\n        this._move();\n      }\n      this._hasSwipeState = false;\n      this._autoplay();\n    };\n    // click\n    this._el.addEventListener('click', (e) => {\n      const $target = e.target;\n      this._autoplay('stop');\n      if ($target.classList.contains(this.constructor.EL_CONTROL)) {\n        e.preventDefault();\n        this._direction = $target.dataset.slide;\n        this._move();\n      } else if ($target.dataset.slideTo) {\n        e.preventDefault();\n        const index = parseInt($target.dataset.slideTo, 10);\n        this._moveTo(index);\n      }\n      this._autoplay();\n    });\n\n    // transitionstart and transitionend\n    if (this._config.loop) {\n      this._elItems.addEventListener('transitionend', () => {\n        this._isBalancing = false;\n      });\n    }\n    // mouseenter and mouseleave\n    this._el.addEventListener('mouseenter', () => {\n      this._autoplay('stop');\n    });\n    this._el.addEventListener('mouseleave', () => {\n      this._autoplay();\n    });\n    // swipe\n    if (this._config.swipe) {\n      const options = this.constructor.checkSupportPassiveEvents() ? { passive: false } : false;\n      this._el.addEventListener('touchstart', onSwipeStart, options);\n      this._el.addEventListener('touchmove', onSwipeMove, options);\n      this._el.addEventListener('mousedown', onSwipeStart);\n      this._el.addEventListener('mousemove', onSwipeMove);\n      document.addEventListener('touchend', onSwipeEnd);\n      document.addEventListener('mouseup', onSwipeEnd);\n      document.addEventListener('mouseout', onSwipeEnd);\n    }\n    this._el.addEventListener('dragstart', (e) => {\n      e.preventDefault();\n    });\n    // при изменении активности вкладки\n    document.addEventListener('visibilitychange', () => {\n      if (document.visibilityState === 'visible' && this._config.loop) {\n        this._autoplay();\n      } else {\n        this._autoplay('stop');\n      }\n    });\n    if (this._supportResizeObserver) {\n      const resizeObserver = new ResizeObserver((entries) => {\n        const { contentRect } = entries[0];\n        if (Math.round(this._clientRect.width * 10) === Math.round(contentRect.width * 10)) {\n          return;\n        }\n        this._clientRect = contentRect;\n        const newValueX = contentRect.width * Number(this._elItems.dataset.translate);\n        this.reset(newValueX, true);\n        this._autoplay();\n      });\n      resizeObserver.observe(this._elWrapper);\n    }\n  }\n\n  reset(newValueX = 0, recalc = false) {\n    this._autoplay('stop');\n    this._elItems.classList.add(this.constructor.TRANSITION_NONE);\n    this._elItems.style.transform = `translate3D(${newValueX}px, 0px, 0.1px)`;\n    this._elListItem.forEach((el) => {\n      const valueX = recalc ? Number(el.dataset.translate) * this._clientRect.width : 0;\n      el.style.transform = `translate3D(${valueX}px, 0px, 0.1px)`;\n    });\n    if (!recalc) {\n      this._transform = 0;\n      this._states = [];\n      this._elItems.dataset.translate = '0';\n      this._elListItem = this._el.querySelectorAll(`.${this.constructor.EL_ITEM}`);\n      // добавляем к слайдам data-атрибуты\n      this._elListItem.forEach((item, index) => {\n        item.dataset.order = `${index}`;\n        item.dataset.index = `${index}`;\n        item.dataset.translate = '0';\n        this._states.push(index === 0 ? 1 : 0);\n      });\n      // перемещаем последний слайд перед первым\n      if (this._config.loop) {\n        const count = this._elListItem.length - 1;\n        const translate = -this._elListItem.length;\n        this._elListItem[count].dataset.order = '-1';\n        this._elListItem[count].dataset.translate = `${-this._elListItem.length}`;\n        const valueX = translate * this._clientRect.width;\n        this._elListItem[count].style.transform = `translate3D(${valueX}px, 0px, 0.1px)`;\n      }\n      this._el.querySelector(`.${this.constructor.EL_INDICATORS}`).remove();\n      // добавляем индикаторы к слайдеру\n      this._addIndicators();\n      this._elListIndicator = document.querySelectorAll(`.${this.constructor.EL_INDICATOR}`);\n      // обновляем экстремальные значения переменных\n      this._updateExProperties();\n      // помечаем активные элементы\n      this._changeActiveItems();\n    }\n    this._autoplay();\n  }\n\n  // перейти к следующему слайду\n  next() {\n    this._direction = 'next';\n    this._move();\n  }\n  // перейти к предыдущему слайду\n  prev() {\n    this._direction = 'prev';\n    this._move();\n  }\n  // управление автоматической сменой слайдов\n  autoplay() {\n    this._autoplay('stop');\n  }\n  moveTo(index) {\n    this._moveTo(index);\n  }\n}"],"names":["ItcSimpleSlider","PREFIX","EL_WRAPPER","EL_ITEM","EL_ITEM_ACTIVE","EL_ITEMS","EL_INDICATOR","EL_INDICATOR_ACTIVE","EL_INDICATORS","EL_CONTROL","SWIPE_THRESHOLD","TRANSITION_NONE","checkSupportPassiveEvents","passiveSupported","options","Object","defineProperty","get","window","addEventListener","removeEventListener","error","constructor","target","config","_el","document","querySelector","_elWrapper","_elItems","_elListItem","querySelectorAll","_exOrderMin","_exOrderMax","_exItemMin","_exItemMax","_exTranslateMin","_exTranslateMax","_states","_isBalancing","_direction","_transform","_clientRect","getBoundingClientRect","_supportResizeObserver","ResizeObserver","styleElItems","getComputedStyle","_delay","Math","round","parseFloat","transitionDuration","_hasSwipeState","_swipeStartPosX","_intervalId","_config","loop","autoplay","interval","indicators","swipe","dataset","translate","forEach","item","index","order","push","count","length","valueX","width","style","transform","_addIndicators","_elListIndicator","_updateExProperties","_changeActiveItems","_addEventListener","_autoplay","classList","add","remove","dispatchEvent","CustomEvent","bubbles","_move","isNotMovePrev","isNotMoveNext","slice","requestAnimationFrame","_balanceItems","bind","_moveTo","currIndex","indexOf","i","abs","action","clearInterval","setInterval","el","rows","html","insertAdjacentHTML","els","values","map","orders","Number","min","max","exItemRight","right","left","exItemLeft","setTimeout","onSwipeStart","e","closest","event","type","search","touches","clientX","_swipeStartPosY","clientY","_hasSwiping","onSwipeMove","diffPosX","diffPosY","preventDefault","isNotMoveFirst","isNotMoveLast","onSwipeEnd","changedTouches","value","$target","contains","slide","slideTo","parseInt","passive","visibilityState","resizeObserver","entries","contentRect","newValueX","reset","observe","recalc","next","prev","moveTo"],"version":3,"file":"index.192dc116.js.map"}